
#!/usr/bin/python

#from gmpy2 import *

#get_context().precision=500

#c = mpq(2205316413931134031046440767620541984801091216351222789180535786851451917462804449135087209259828503848304180574549372616172217553002988241140344023060716738565104171296716554122734607654513009667720334889869007276287692856645210293194853, 1)

#print str(hex(int(cbrt(c))))[2:-1].decode('hex')
import binascii
import gmpy
from Crypto.Util.number import long_to_bytes
#import gmpy2
import math
n=374159235470172130988938196520880526947952521620932362050308663243595788308583992120881359365258949723819911758198013202644666489247987314025169670926273213367237020188587742716017314320191350666762541039238241984934473188656610615918474673963331992408750047451253205158436452814354564283003696666945950908549197175404580533132142111356931324330631843602412540295482841975783884766801266552337129105407869020730226041538750535628619717708838029286366761470986056335230171148734027536820544543251801093230809186222940806718221638845816521738601843083746103374974120575519418797642878012234163709518203946599836959811
e=3
c=2205316413931134031046440767620541984801091216351222789180535786851451917462804449135087209259828503848304180574549372616172217553002988241140344023060716738565104171296716554122734607654513009667720334889869007276287692856645210293194853

def find_cube_root(n):
	low = 0
	high = n
	while low < high:
		mid = (low+high)//2
		if mid**3 < n:
			low = mid+1
		else:
			high = mid
	print(low)
	return low
p=find_cube_root(n)
q = n / p
print("p: ",p)
print("q: ",q)
phi = (p-1)*(q-1)
print("phi:",phi)
print("--")
d = gmpy.invert(e, phi)
print("d: ",d)
ans = pow(c, d, n)
print("plain: ",ans)

print("flag: ",long_to_bytes(ans))
print("flag2: ",long_to_bytes(p))
print("flag2: ",long_to_bytes(q))
print("flag2: ",long_to_bytes(phi))

print("flag2: ",long_to_bytes(d))
